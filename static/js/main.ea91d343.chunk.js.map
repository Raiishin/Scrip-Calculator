{"version":3,"sources":["logic/helpers/index.js","App.js","reportWebVitals.js","index.js"],"names":["calculateAvgScripCost","scripCost","scripShares","parseFloat","toFixed","calculateYield","expectedForwardDPS","avgScripShareCost","calculateNewAvgCost","avgCostPerShare","sharesOutstanding","parseInt","validate","content","require","TextField","Grid","Button","Table","TableHead","TableRow","TableCell","TableBody","TableFooter","TablePagination","CircularProgress","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","App","useState","setExpectedForwardDPS","setSharesOutstanding","setAvgCostPerShare","scripPrice","setScripPrice","DPS","setDPS","roundOff","setRoundOff","roundOffView","setRoundOffView","rows","setRows","loading","setLoading","page","setPage","rowsPerPage","setRowsPerPage","paginationView","setPaginationView","flag1","setFlag1","flag2","setFlag2","React","open","setOpen","errorMessage","setErrorMessage","handleClickOpen","handleClose","handleButtonClick","flag","createData","roundUp","sharesForScrip","netCash","scripCostYield","newAvgCostPerShare","newForwardYield","calculateNumberOfSharesForScrip","arr","limit","i","console","log","Math","round","push","className","style","padding","container","spacing","item","xl","xs","label","defaultValue","id","variant","onChange","e","target","value","color","size","onClick","document","getElementById","onClose","aria-labelledby","aria-describedby","autoFocus","stickyHeader","aria-label","align","map","row","fontWeight","rowsPerPageOptions","count","SelectProps","inputProps","native","onChangePage","event","newPage","onChangeRowsPerPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wKAAA,yMAAO,IAAMA,EAAwB,SAACC,EAAWC,GAC/C,OAAOC,YAAYF,EAAYC,GAAaE,QAAQ,KAEzCC,EAAiB,SAACC,EAAoBC,GACjD,OAAOJ,YAAaG,EAAqBC,EAAqB,KAAKH,QAAQ,KAGhEI,EAAsB,SAACC,EAAiBC,EAAmBT,EAAWC,GAGjF,QAFkBO,EAAkBC,EAAoBT,IACpCU,SAASD,GAAqBR,IACjBE,QAAQ,IAG9BQ,EAAW,SAACC,GACvB,MAAgB,MAAZA,I,8GCKFC,EAAQ,KAhBVC,E,EAAAA,UACAC,E,EAAAA,KACAC,E,EAAAA,OACAC,E,EAAAA,MACAC,E,EAAAA,UACAC,E,EAAAA,SACAC,E,EAAAA,UACAC,E,EAAAA,UACAC,E,EAAAA,YACAC,E,EAAAA,gBACAC,E,EAAAA,iBACAC,E,EAAAA,OACAC,E,EAAAA,YACAC,E,EAAAA,cACAC,E,EAAAA,kBACAC,E,EAAAA,c,EAE+EhB,EAAQ,KAAjFd,E,EAAAA,sBAAuBK,E,EAAAA,eAAgBG,E,EAAAA,oBAAqBI,E,EAAAA,SAwUrDmB,MAtUf,WAAgB,IAAD,EACuCC,mBAAS,GADhD,mBACN1B,EADM,KACc2B,EADd,OAEqCD,mBAAS,GAF9C,mBAENtB,EAFM,KAEawB,EAFb,OAGiCF,mBAAS,GAH1C,mBAGNvB,EAHM,KAGW0B,EAHX,OAIuBH,mBAAS,GAJhC,mBAINI,EAJM,KAIMC,EAJN,OAKSL,mBAAS,GALlB,mBAKNM,EALM,KAKDC,EALC,OAMmBP,mBAAS,IAN5B,mBAMNQ,EANM,KAMIC,EANJ,OAO2BT,oBAAS,GAPpC,mBAONU,EAPM,KAOQC,EAPR,OAQWX,mBAAS,IARpB,mBAQNY,GARM,KAQAC,GARA,QASiBb,oBAAS,GAT1B,qBASNc,GATM,MASGC,GATH,SAUWf,mBAAS,GAVpB,qBAUNgB,GAVM,MAUAC,GAVA,SAWyBjB,mBAAS,IAXlC,qBAWNkB,GAXM,MAWOC,GAXP,SAY+BnB,oBAAS,GAZxC,qBAYNoB,GAZM,MAYUC,GAZV,SAaarB,oBAAS,GAbtB,qBAaNsB,GAbM,MAaCC,GAbD,SAcavB,oBAAS,GAdtB,qBAcNwB,GAdM,MAcCC,GAdD,SAeWC,IAAM1B,UAAS,GAf1B,qBAeN2B,GAfM,MAeAC,GAfA,SAgB2BF,IAAM1B,SAAS,IAhB1C,qBAgBN6B,GAhBM,MAgBQC,GAhBR,MAkBPC,GAAkB,WACtBH,IAAQ,IAGJI,GAAc,WAClBJ,IAAQ,IAGJK,GAAoB,SAACC,GACZ,UAATA,GACFX,IAAS,GACTE,IAAS,KAETF,IAAS,GACTE,IAAS,KAePU,GAAa,SACjBjE,EACAkE,EACAC,EACApE,EACAM,EACA+D,EACAC,EACAC,EACAC,GAEA,MAAO,CACLvE,cACAkE,UACAC,iBACApE,YACAM,oBACA+D,UACAC,iBACAC,qBACAC,oBAIEC,GAAkC,SAAC1B,EAAME,GAC7CH,IAAW,GAMX,IAJA,IAAM4B,EAAM,GAERC,GAAU5B,EAAO,GAAKE,EAAe,EAEhC2B,EAHM7B,EAAOE,EAAe,EAGhBV,EAAUqC,GAAKD,EAAOC,GAAQrC,EAAU,CAC3DsC,QAAQC,IAAI,SACZ,IAAI7E,EAAc8E,KAAKC,MAAMJ,GACzBR,EAAiBW,KAAKC,MAAOJ,EAAIzC,EAAcE,GAC/CrC,EAAYE,YAAYkE,EAAiB/B,GAAKlC,QAAQ,IACtDkE,EAAUnE,aAAaO,EAAoB2D,GAAkB/B,GAAKlC,QAAQ,IAE1EG,EAAoBP,EAAsBC,EAAWC,GACrDqE,EAAiBlE,EAAeC,EAAoBC,GAGpDiE,EAAqBhE,EAAoBC,EAAiBC,EAAmBT,EAAWC,GACxFuE,EAAkBpE,EAAeC,EAAoBkE,GACzDG,EAAIO,KACFf,GACEU,EACA3E,EACAmE,EACApE,EACAM,EACA+D,EACAC,EACAC,EACAC,IAKN5B,GAAQ8B,GACR5B,IAAW,GAGTJ,EADe,KAAbH,IAON,OACE,sBAAK2C,UAAU,MAAf,UACE,kDAEA,qBAAKC,MAAO,CAAEC,QAAS,IAAvB,SACE,eAACrE,EAAD,CAAMsE,WAAS,EAACC,QAAS,EAAzB,UACE,eAACvE,EAAD,CAAMsE,WAAS,EAACF,MAAO,CAAEC,QAAS,GAAlC,UACE,cAACrE,EAAD,CAAMsE,WAAS,EAACE,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAhC,SACE,cAAC3E,EAAD,CACE4E,MAAM,2BACNC,aAAa,IACbC,GAAG,qBACHC,QAAQ,WACRC,SAAU,SAACC,GACT/D,EAAsB+D,EAAEC,OAAOC,YAIrC,cAAClF,EAAD,CAAMsE,WAAS,EAACE,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAhC,SACE,cAAC3E,EAAD,CACE4E,MAAM,2BACNC,aAAa,IACbC,GAAG,oBACHC,QAAQ,WACRC,SAAU,SAACC,GACT9D,EAAqB8D,EAAEC,OAAOC,YAIpC,cAAClF,EAAD,CAAMsE,WAAS,EAACE,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAhC,SACE,cAAC3E,EAAD,CACE4E,MAAM,iCACNC,aAAa,IACbC,GAAG,kBACHC,QAAQ,WACRC,SAAU,SAACC,GACT7D,EAAmB6D,EAAEC,OAAOC,eAKpC,eAAClF,EAAD,CAAMsE,WAAS,EAACF,MAAO,CAAEC,QAAS,GAAlC,UACE,cAACrE,EAAD,CAAMsE,WAAS,EAACE,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAhC,SACE,cAAC3E,EAAD,CACE4E,MAAM,oBACNC,aAAa,IACbC,GAAG,aACHC,QAAQ,WACRC,SAAU,SAACC,GACT3D,EAAc2D,EAAEC,OAAOC,YAI7B,cAAClF,EAAD,CAAMsE,WAAS,EAACE,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAhC,SACE,cAAC3E,EAAD,CACE4E,MAAM,8BACNC,aAAa,IACbC,GAAG,MACHC,QAAQ,WACRC,SAAU,SAACC,GACTzD,EAAOyD,EAAEC,OAAOC,eAKxB,eAAClF,EAAD,CAAMsE,WAAS,EAACF,MAAO,CAAEC,QAAS,GAAlC,UACE,cAACrE,EAAD,CAAMwE,MAAI,EAACJ,MAAO,CAAEC,QAAS,GAA7B,2BAGA,cAACrE,EAAD,CAAMwE,MAAI,EAACJ,MAAO,CAAEC,QAAS,GAA7B,SACE,cAACpE,EAAD,CACE6E,QAASxC,GAAQ,YAAc,WAC/B6C,MAAM,UACNC,KAAK,QACLC,QAAS,WACPpC,GAAkB,SAClBxB,EAAY,KANhB,mBAYF,cAACzB,EAAD,CAAMwE,MAAI,EAACJ,MAAO,CAAEC,QAAS,GAA7B,SACE,cAACpE,EAAD,CACE6E,QAAStC,GAAQ,YAAc,WAC/B2C,MAAM,UACNC,KAAK,QACLC,QAAS,WACPpC,GAAkB,SAClBxB,EAAY,IANhB,oBAaJ,cAACzB,EAAD,CAAMsE,WAAS,EAACF,MAAO,CAAEC,QAAS,GAAlC,SACE,cAACpE,EAAD,CACE6E,QAAQ,YACRK,MAAM,UACNE,QAAS,YAC+D,IAAlEzF,EAAS0F,SAASC,eAAe,sBAAsBL,QACzDnC,KACAD,GAAgB,+CAC0D,IAAjElD,EAAS0F,SAASC,eAAe,qBAAqBL,QAC/DnC,KACAD,GAAgB,+CACwD,IAA/DlD,EAAS0F,SAASC,eAAe,mBAAmBL,QAC7DnC,KACAD,GAAgB,qDACmD,IAA1DlD,EAAS0F,SAASC,eAAe,cAAcL,QACxDnC,KACAD,GAAgB,wCAC4C,IAAnDlD,EAAS0F,SAASC,eAAe,OAAOL,QACjDnC,KACAD,GAAgB,kDAEhBgB,QAAQC,IAAIzE,EAAoBI,EAAmB0B,EAAYE,GAC/DoC,GAAgC1B,GAAME,IACtCG,IAAkB,GAElByB,QAAQC,IAAInC,MAxBlB,iCAgCF,eAAClB,EAAD,CACEiC,KAAMA,GACN6C,QAASxC,GACTyC,kBAAgB,qBAChBC,mBAAiB,2BAJnB,UAME,cAAC/E,EAAD,CAAakE,GAAG,qBAAhB,SAAsC,kBACtC,cAACjE,EAAD,UACE,cAACC,EAAD,CAAmBgE,GAAG,2BAAtB,SAAkDhC,OAEpD,cAAC/B,EAAD,UACE,cAACb,EAAD,CAAQoF,QAASrC,GAAamC,MAAM,UAAUQ,WAAS,EAAvD,uBAMJ,cAAC3F,EAAD,CAAMsE,WAAS,EAACF,MAAO,CAAEC,QAAS,GAAlC,SACE,cAACrE,EAAD,CAAMsE,WAAS,EAAf,SACGxC,GACC,eAAC5B,EAAD,CAAO0F,cAAY,EAACC,aAAW,eAA/B,UACE,cAAC1F,EAAD,UACE,eAACC,EAAD,WACE,cAACC,EAAD,qCACA,cAACA,EAAD,CAAWyF,MAAM,SAAjB,qCACCpE,EAAe,cAACrB,EAAD,CAAWyF,MAAM,SAAjB,8CAAyE,GACzF,cAACzF,EAAD,CAAWyF,MAAM,SAAjB,oCACA,cAACzF,EAAD,CAAWyF,MAAM,SAAjB,kCACA,cAACzF,EAAD,CAAWyF,MAAM,SAAjB,8CACA,cAACzF,EAAD,CAAWyF,MAAM,SAAjB,sCAGJ,cAACxF,EAAD,UACGsB,GAAKmE,KAAI,SAACC,GAAD,OACR,eAAC5F,EAAD,WACE,cAACC,EAAD,CAAWyF,MAAM,SAAjB,SAA2BE,EAAI9G,cAC/B,cAACmB,EAAD,CAAWyF,MAAM,SAAjB,SAA2BE,EAAI3C,iBAC9B3B,EAAe,cAACrB,EAAD,CAAWyF,MAAM,SAAjB,SAA2BE,EAAI5C,UAAuB,GACtE,cAAC/C,EAAD,CAAWyF,MAAM,SAAjB,SAA2BE,EAAIzG,oBAC/B,cAACc,EAAD,CAAWyF,MAAM,SAAS1B,MAAO,CAAE6B,WAAY,QAA/C,SACGD,EAAIzC,iBAEP,cAAClD,EAAD,CAAWyF,MAAM,SAAS1B,MAAO,CAAE6B,WAAY,QAA/C,SACGD,EAAIvC,kBAEP,cAACpD,EAAD,CAAWyF,MAAM,SAAjB,SAA2BE,EAAI1C,YAXlB0C,EAAI9G,kBAevB,cAACqB,EAAD,UACE,cAACH,EAAD,UACGgC,GACC,cAAC5B,EAAD,CACE0F,mBAAoB,CAAC,GAAI,IAAK,IAAK,KACnCC,MAAO,IACPjE,YAAaA,GACbF,KAAMA,GACNoE,YAAa,CACXC,WAAY,CAAE,aAAc,iBAC5BC,QAAQ,GAEVC,aA9QC,SAACC,EAAOC,GAC/BxE,GAAQwE,GACR/C,GAAgC+C,EAASvE,KA6QnBwE,oBA1QQ,SAACF,GAC/BrE,GAAexC,SAAS6G,EAAMvB,OAAOC,QACrCjD,GAAQ,GACRyB,GAAgC,EAAG/D,SAAS6G,EAAMvB,OAAOC,WA0QrC,cAAC9E,EAAD,WAMR,cAACK,EAAD,iBCtUDkG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASC,eAAe,SAM1BoB,M","file":"static/js/main.ea91d343.chunk.js","sourcesContent":["export const calculateAvgScripCost = (scripCost, scripShares) => {\r\n  return parseFloat((scripCost / scripShares).toFixed(2));\r\n};\r\nexport const calculateYield = (expectedForwardDPS, avgScripShareCost) => {\r\n  return parseFloat(((expectedForwardDPS / avgScripShareCost) * 100).toFixed(5));\r\n};\r\n\r\nexport const calculateNewAvgCost = (avgCostPerShare, sharesOutstanding, scripCost, scripShares) => {\r\n  const totalCost = avgCostPerShare * sharesOutstanding + scripCost;\r\n  const totalShares = parseInt(sharesOutstanding) + scripShares;\r\n  return (totalCost / totalShares).toFixed(3);\r\n};\r\n\r\nexport const validate = (content) => {\r\n  if (content !== \" \") return true;\r\n  else return false;\r\n};\r\n","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nconst {\r\n  TextField,\r\n  Grid,\r\n  Button,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  TableFooter,\r\n  TablePagination,\r\n  CircularProgress,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n} = require(\"@material-ui/core\");\r\nconst { calculateAvgScripCost, calculateYield, calculateNewAvgCost, validate } = require(\"./logic/helpers\");\r\n\r\nfunction App() {\r\n  const [expectedForwardDPS, setExpectedForwardDPS] = useState(0);\r\n  const [sharesOutstanding, setSharesOutstanding] = useState(0);\r\n  const [avgCostPerShare, setAvgCostPerShare] = useState(0);\r\n  const [scripPrice, setScripPrice] = useState(0);\r\n  const [DPS, setDPS] = useState(0);\r\n  const [roundOff, setRoundOff] = useState(0.5);\r\n  const [roundOffView, setRoundOffView] = useState(true);\r\n  const [rows, setRows] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(50);\r\n  const [paginationView, setPaginationView] = useState(false);\r\n  const [flag1, setFlag1] = useState(false);\r\n  const [flag2, setFlag2] = useState(false);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [errorMessage, setErrorMessage] = React.useState(\"\");\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleButtonClick = (flag) => {\r\n    if (flag === \"flag1\") {\r\n      setFlag1(true);\r\n      setFlag2(false);\r\n    } else {\r\n      setFlag1(false);\r\n      setFlag2(true);\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    calculateNumberOfSharesForScrip(newPage, rowsPerPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value));\r\n    setPage(0);\r\n    calculateNumberOfSharesForScrip(0, parseInt(event.target.value));\r\n  };\r\n\r\n  const createData = (\r\n    scripShares,\r\n    roundUp,\r\n    sharesForScrip,\r\n    scripCost,\r\n    avgScripShareCost,\r\n    netCash,\r\n    scripCostYield,\r\n    newAvgCostPerShare,\r\n    newForwardYield\r\n  ) => {\r\n    return {\r\n      scripShares,\r\n      roundUp,\r\n      sharesForScrip,\r\n      scripCost,\r\n      avgScripShareCost,\r\n      netCash,\r\n      scripCostYield,\r\n      newAvgCostPerShare,\r\n      newForwardYield,\r\n    };\r\n  };\r\n\r\n  const calculateNumberOfSharesForScrip = (page, rowsPerPage) => {\r\n    setLoading(false);\r\n\r\n    const arr = [];\r\n    const count = (page * rowsPerPage) / 2;\r\n    let limit = ((page + 1) * rowsPerPage) / 2;\r\n\r\n    for (let i = count + roundOff; i <= limit; i = i + roundOff) {\r\n      console.log(\"Start\");\r\n      let scripShares = Math.round(i); // Number is rounded up\r\n      let sharesForScrip = Math.round((i * scripPrice) / DPS);\r\n      let scripCost = parseFloat((sharesForScrip * DPS).toFixed(2));\r\n      let netCash = parseFloat(((sharesOutstanding - sharesForScrip) * DPS).toFixed(2));\r\n\r\n      let avgScripShareCost = calculateAvgScripCost(scripCost, scripShares);\r\n      let scripCostYield = calculateYield(expectedForwardDPS, avgScripShareCost);\r\n\r\n      // Calculate New Values\r\n      let newAvgCostPerShare = calculateNewAvgCost(avgCostPerShare, sharesOutstanding, scripCost, scripShares);\r\n      let newForwardYield = calculateYield(expectedForwardDPS, newAvgCostPerShare);\r\n      arr.push(\r\n        createData(\r\n          i,\r\n          scripShares,\r\n          sharesForScrip,\r\n          scripCost,\r\n          avgScripShareCost,\r\n          netCash,\r\n          scripCostYield,\r\n          newAvgCostPerShare,\r\n          newForwardYield\r\n        )\r\n      );\r\n    }\r\n\r\n    setRows(arr);\r\n    setLoading(true);\r\n\r\n    if (roundOff === 0.5) {\r\n      setRoundOffView(true);\r\n    } else {\r\n      setRoundOffView(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Scrip Calculator</h1>\r\n\r\n      <div style={{ padding: 20 }}>\r\n        <Grid container spacing={1}>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Expected Annual Dividend\"\r\n                defaultValue=\" \"\r\n                id=\"expectedForwardDPS\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setExpectedForwardDPS(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Current Amount of Shares\"\r\n                defaultValue=\" \"\r\n                id=\"sharesOutstanding\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setSharesOutstanding(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Current Average Cost Per Share\"\r\n                defaultValue=\" \"\r\n                id=\"avgCostPerShare\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setAvgCostPerShare(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Scrip Issue Price\"\r\n                defaultValue=\" \"\r\n                id=\"scripPrice\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setScripPrice(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Declared Dividend Per Share\"\r\n                defaultValue=\" \"\r\n                id=\"DPS\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setDPS(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid item style={{ padding: 5 }}>\r\n              Round off to:\r\n            </Grid>\r\n            <Grid item style={{ padding: 5 }}>\r\n              <Button\r\n                variant={flag1 ? \"contained\" : \"outlined\"}\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                onClick={() => {\r\n                  handleButtonClick(\"flag1\");\r\n                  setRoundOff(0.5);\r\n                }}\r\n              >\r\n                0.5\r\n              </Button>\r\n            </Grid>\r\n            <Grid item style={{ padding: 5 }}>\r\n              <Button\r\n                variant={flag2 ? \"contained\" : \"outlined\"}\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                onClick={() => {\r\n                  handleButtonClick(\"flag2\");\r\n                  setRoundOff(1);\r\n                }}\r\n              >\r\n                1\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                if (validate(document.getElementById(\"expectedForwardDPS\").value) === false) {\r\n                  handleClickOpen();\r\n                  setErrorMessage(\"Please input the Expected Annual Dividend\");\r\n                } else if (validate(document.getElementById(\"sharesOutstanding\").value) === false) {\r\n                  handleClickOpen();\r\n                  setErrorMessage(\"Please input the Current Amount of Shares\");\r\n                } else if (validate(document.getElementById(\"avgCostPerShare\").value) === false) {\r\n                  handleClickOpen();\r\n                  setErrorMessage(\"Please input the Current Average Cost Per Share\");\r\n                } else if (validate(document.getElementById(\"scripPrice\").value) === false) {\r\n                  handleClickOpen();\r\n                  setErrorMessage(\"Please input the Scrip Issue Price\");\r\n                } else if (validate(document.getElementById(\"DPS\").value) === false) {\r\n                  handleClickOpen();\r\n                  setErrorMessage(\"Please input the Declared Dividend Per Share\");\r\n                } else {\r\n                  console.log(expectedForwardDPS, sharesOutstanding, scripPrice, DPS);\r\n                  calculateNumberOfSharesForScrip(page, rowsPerPage);\r\n                  setPaginationView(true);\r\n\r\n                  console.log(rows);\r\n                }\r\n              }}\r\n            >\r\n              Show Me My Scrips\r\n            </Button>\r\n          </Grid>\r\n\r\n          <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-title\">{\"Missing Input\"}</DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText id=\"alert-dialog-description\">{errorMessage}</DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                Okay\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container>\r\n              {loading ? (\r\n                <Table stickyHeader aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Scrip Shares Entitlted</TableCell>\r\n                      <TableCell align=\"center\">Share Quantity to Elect</TableCell>\r\n                      {roundOffView ? <TableCell align=\"center\">Scrip Shares After Round Up/Down</TableCell> : \"\"}\r\n                      <TableCell align=\"center\">Average Cost per Scrip</TableCell>\r\n                      <TableCell align=\"center\">Yield on Scrip Share</TableCell>\r\n                      <TableCell align=\"center\">New Average Cost Yield per Share</TableCell>\r\n                      <TableCell align=\"center\">Cash to be Received</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {rows.map((row) => (\r\n                      <TableRow key={row.scripShares}>\r\n                        <TableCell align=\"center\">{row.scripShares}</TableCell>\r\n                        <TableCell align=\"center\">{row.sharesForScrip}</TableCell>\r\n                        {roundOffView ? <TableCell align=\"center\">{row.roundUp}</TableCell> : \"\"}\r\n                        <TableCell align=\"center\">{row.avgScripShareCost}</TableCell>\r\n                        <TableCell align=\"center\" style={{ fontWeight: \"bold\" }}>\r\n                          {row.scripCostYield}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\" style={{ fontWeight: \"bold\" }}>\r\n                          {row.newForwardYield}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">{row.netCash}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                  <TableFooter>\r\n                    <TableRow>\r\n                      {paginationView ? (\r\n                        <TablePagination\r\n                          rowsPerPageOptions={[50, 250, 500, 1000]}\r\n                          count={100000}\r\n                          rowsPerPage={rowsPerPage}\r\n                          page={page}\r\n                          SelectProps={{\r\n                            inputProps: { \"aria-label\": \"rows per page\" },\r\n                            native: true,\r\n                          }}\r\n                          onChangePage={handleChangePage}\r\n                          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                        />\r\n                      ) : (\r\n                        <TableRow />\r\n                      )}\r\n                    </TableRow>\r\n                  </TableFooter>\r\n                </Table>\r\n              ) : (\r\n                <CircularProgress />\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}