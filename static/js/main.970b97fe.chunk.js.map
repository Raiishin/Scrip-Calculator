{"version":3,"sources":["logic/helpers/index.js","App.js","reportWebVitals.js","index.js"],"names":["calculateAvgScripCost","scripCost","scripShares","parseFloat","toFixed","calculateYield","expectedForwardDPS","avgScripShareCost","calculateNewAvgCost","avgCostPerShare","sharesOutstanding","parseInt","require","TextField","Grid","Button","Table","TableHead","TableRow","TableCell","TableBody","TablePagination","App","useState","setRender","setExpectedForwardDPS","setSharesOutstanding","setAvgCostPerShare","currentForwardYield","setCurrentForwardYield","scripPrice","setScripPrice","DPS","setDPS","rows","createData","roundUp","sharesForScrip","netCash","scripCostYield","newAvgCostPerShare","newForwardYield","className","style","padding","container","spacing","item","xs","label","id","variant","onChange","e","target","value","color","onClick","console","log","i","Math","round","push","calculateNumberOfSharesForScrip","aria-label","align","map","row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.970b97fe.chunk.js","sourcesContent":["export const calculateAvgScripCost = (scripCost, scripShares) => {\r\n  return parseFloat((scripCost / scripShares).toFixed(2));\r\n};\r\nexport const calculateYield = (expectedForwardDPS, avgScripShareCost) => {\r\n  return parseFloat(((expectedForwardDPS / avgScripShareCost) * 100).toFixed(5));\r\n};\r\n\r\nexport const calculateNewAvgCost = (avgCostPerShare, sharesOutstanding, scripCost, scripShares) => {\r\n  const totalCost = avgCostPerShare * sharesOutstanding + scripCost;\r\n  const totalShares = parseInt(sharesOutstanding) + scripShares;\r\n  return (totalCost / totalShares).toFixed(3);\r\n};\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nconst {\n  TextField,\n  Grid,\n  Button,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  TablePagination,\n} = require(\"@material-ui/core\");\nconst { calculateAvgScripCost, calculateYield, calculateNewAvgCost } = require(\"./logic/helpers\");\n\nfunction App() {\n  const [render, setRender] = useState(false);\n  const [expectedForwardDPS, setExpectedForwardDPS] = useState(0);\n  const [sharesOutstanding, setSharesOutstanding] = useState(0);\n  const [avgCostPerShare, setAvgCostPerShare] = useState(0);\n  const [currentForwardYield, setCurrentForwardYield] = useState(0);\n  const [scripPrice, setScripPrice] = useState(0);\n  const [DPS, setDPS] = useState(0);\n  const [rows, setRows] = useState([]);\n\n  function createData(\n    scripShares,\n    roundUp,\n    sharesForScrip,\n    scripCost,\n    avgScripShareCost,\n    netCash,\n    scripCostYield,\n    newAvgCostPerShare,\n    newForwardYield\n  ) {\n    return {\n      scripShares,\n      roundUp,\n      sharesForScrip,\n      scripCost,\n      avgScripShareCost,\n      netCash,\n      scripCostYield,\n      newAvgCostPerShare,\n      newForwardYield,\n    };\n  }\n\n  const calculateNumberOfSharesForScrip = () => {\n    for (let i = 0.5; i <= 100; i = i + 0.5) {\n      let scripShares = Math.round(i); // Number is rounded up\n      let sharesForScrip = Math.round((i * scripPrice) / DPS);\n      let scripCost = parseFloat((sharesForScrip * DPS).toFixed(2));\n      let netCash = parseFloat(((sharesOutstanding - sharesForScrip) * DPS).toFixed(2));\n\n      let avgScripShareCost = calculateAvgScripCost(scripCost, scripShares);\n      let scripCostYield = calculateYield(expectedForwardDPS, avgScripShareCost);\n\n      // Calculate New Values\n      let newAvgCostPerShare = calculateNewAvgCost(avgCostPerShare, sharesOutstanding, scripCost, scripShares);\n      let newForwardYield = calculateYield(expectedForwardDPS, newAvgCostPerShare);\n\n      rows.push(\n        createData(\n          i,\n          scripShares,\n          sharesForScrip,\n          scripCost,\n          avgScripShareCost,\n          netCash,\n          scripCostYield,\n          newAvgCostPerShare,\n          newForwardYield\n        )\n      );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Scrip Calculator</h1>\n\n      <div style={{ padding: 20 }}>\n        <Grid container spacing={1}>\n          <Grid container style={{ padding: 5 }}>\n            <Grid container item xs={2}>\n              <TextField\n                label=\"Expected Forward DPS\"\n                id=\"expectedForwardDPS\"\n                variant=\"outlined\"\n                onChange={(e) => {\n                  setExpectedForwardDPS(e.target.value);\n                }}\n              />\n            </Grid>\n          </Grid>\n          <Grid container style={{ padding: 5 }}>\n            <Grid container item xs={2}>\n              <TextField\n                label=\"Shares Currently Held\"\n                id=\"sharesOutstanding\"\n                variant=\"outlined\"\n                onChange={(e) => {\n                  setSharesOutstanding(e.target.value);\n                }}\n              />\n            </Grid>\n            <Grid container item xs={2}>\n              <TextField\n                label=\"Average Cost Per Share\"\n                id=\"avgCostPerShare\"\n                variant=\"outlined\"\n                onChange={(e) => {\n                  setAvgCostPerShare(e.target.value);\n                }}\n              />\n            </Grid>\n            <Grid container item xs={2} style={{}}>\n              Current Forward Yield = {currentForwardYield}\n            </Grid>\n          </Grid>\n          <Grid container style={{ padding: 5 }}>\n            <Grid container item xs={2}>\n              <TextField\n                label=\"Scrip Issue Price\"\n                id=\"scripPrice\"\n                variant=\"outlined\"\n                onChange={(e) => {\n                  setScripPrice(e.target.value);\n                }}\n              />\n            </Grid>\n          </Grid>\n          <Grid container style={{ padding: 5 }}>\n            <Grid container item xs={2}>\n              <TextField\n                label=\"Declared Dividend Per Share\"\n                id=\"DPS\"\n                variant=\"outlined\"\n                onChange={(e) => {\n                  setDPS(e.target.value);\n                }}\n              />\n            </Grid>\n          </Grid>\n          <Grid container style={{ padding: 5 }}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                console.log(expectedForwardDPS, sharesOutstanding, scripPrice, DPS);\n                setCurrentForwardYield(calculateYield(expectedForwardDPS, avgCostPerShare));\n                calculateNumberOfSharesForScrip();\n                setRender(true);\n              }}\n            >\n              Render Table\n            </Button>\n          </Grid>\n\n          <Grid container style={{ padding: 5 }}>\n            <Grid container item xs={2}></Grid>\n            <Grid container item xs={8}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Number of Scrip Shares</TableCell>\n                    <TableCell align=\"center\">Rounded Up Scrip Shares</TableCell>\n                    <TableCell align=\"center\">Number of Shares for Scrip</TableCell>\n                    <TableCell align=\"center\">Cost</TableCell>\n                    <TableCell align=\"center\">Average Cost per Scrip</TableCell>\n                    <TableCell align=\"center\">Net Cash Dividends</TableCell>\n                    <TableCell align=\"center\">Yield on Scrip Cost</TableCell>\n                    <TableCell align=\"center\">New Average Cost per Share</TableCell>\n                    <TableCell align=\"center\">New Forward Yield</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map((row) => (\n                    <TableRow key={row.scripShares}>\n                      <TableCell align=\"center\">{row.scripShares}</TableCell>\n                      <TableCell align=\"center\">{row.roundUp}</TableCell>\n                      <TableCell align=\"center\">{row.sharesForScrip}</TableCell>\n                      <TableCell align=\"center\">{row.scripCost}</TableCell>\n                      <TableCell align=\"center\">{row.avgScripShareCost}</TableCell>\n                      <TableCell align=\"center\">{row.netCash}</TableCell>\n                      <TableCell align=\"center\">{row.scripCostYield}</TableCell>\n                      <TableCell align=\"center\">{row.newAvgCostPerShare}</TableCell>\n                      <TableCell align=\"center\">{row.newForwardYield}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}