{"version":3,"sources":["logic/helpers/index.js","App.js","reportWebVitals.js","index.js"],"names":["calculateAvgScripCost","scripCost","scripShares","parseFloat","toFixed","calculateYield","expectedForwardDPS","avgScripShareCost","calculateNewAvgCost","avgCostPerShare","sharesOutstanding","parseInt","require","TextField","Grid","Button","Table","TableHead","TableRow","TableCell","TableBody","TableFooter","TablePagination","CircularProgress","App","useState","setExpectedForwardDPS","setSharesOutstanding","setAvgCostPerShare","scripPrice","setScripPrice","DPS","setDPS","roundOff","setRoundOff","roundOffView","setRoundOffView","rows","setRows","loading","setLoading","page","setPage","rowsPerPage","setRowsPerPage","paginationView","setPaginationView","flag1","setFlag1","flag2","setFlag2","handleButtonClick","flag","createData","roundUp","sharesForScrip","netCash","scripCostYield","newAvgCostPerShare","newForwardYield","calculateNumberOfSharesForScrip","arr","limit","i","console","log","Math","round","push","className","style","padding","container","spacing","item","xl","xs","label","defaultValue","id","variant","onChange","e","target","value","color","size","onClick","stickyHeader","aria-label","align","map","row","rowsPerPageOptions","count","SelectProps","inputProps","native","onChangePage","event","newPage","onChangeRowsPerPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79e0d4e2.chunk.js","sourcesContent":["export const calculateAvgScripCost = (scripCost, scripShares) => {\r\n  return parseFloat((scripCost / scripShares).toFixed(2));\r\n};\r\nexport const calculateYield = (expectedForwardDPS, avgScripShareCost) => {\r\n  return parseFloat(((expectedForwardDPS / avgScripShareCost) * 100).toFixed(5));\r\n};\r\n\r\nexport const calculateNewAvgCost = (avgCostPerShare, sharesOutstanding, scripCost, scripShares) => {\r\n  const totalCost = avgCostPerShare * sharesOutstanding + scripCost;\r\n  const totalShares = parseInt(sharesOutstanding) + scripShares;\r\n  return (totalCost / totalShares).toFixed(3);\r\n};\r\n","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nconst {\r\n  TextField,\r\n  Grid,\r\n  Button,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  TableFooter,\r\n  TablePagination,\r\n  CircularProgress,\r\n} = require(\"@material-ui/core\");\r\nconst { calculateAvgScripCost, calculateYield, calculateNewAvgCost } = require(\"./logic/helpers\");\r\n\r\nfunction App() {\r\n  const [expectedForwardDPS, setExpectedForwardDPS] = useState(0);\r\n  const [sharesOutstanding, setSharesOutstanding] = useState(0);\r\n  const [avgCostPerShare, setAvgCostPerShare] = useState(0);\r\n  // const [currentForwardYield, setCurrentForwardYield] = useState(0);\r\n  const [scripPrice, setScripPrice] = useState(0);\r\n  const [DPS, setDPS] = useState(0);\r\n  const [roundOff, setRoundOff] = useState(0.5);\r\n  const [roundOffView, setRoundOffView] = useState(true);\r\n  const [rows, setRows] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(50);\r\n  const [paginationView, setPaginationView] = useState(false);\r\n  const [flag1, setFlag1] = useState(false);\r\n  const [flag2, setFlag2] = useState(false);\r\n\r\n  const handleButtonClick = (flag) => {\r\n    if (flag === \"flag1\") {\r\n      setFlag1(true);\r\n      setFlag2(false);\r\n    } else {\r\n      setFlag1(false);\r\n      setFlag2(true);\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    calculateNumberOfSharesForScrip(newPage, rowsPerPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value));\r\n    setPage(0);\r\n    calculateNumberOfSharesForScrip(0, parseInt(event.target.value));\r\n  };\r\n\r\n  const createData = (\r\n    scripShares,\r\n    roundUp,\r\n    sharesForScrip,\r\n    scripCost,\r\n    avgScripShareCost,\r\n    netCash,\r\n    scripCostYield,\r\n    newAvgCostPerShare,\r\n    newForwardYield\r\n  ) => {\r\n    return {\r\n      scripShares,\r\n      roundUp,\r\n      sharesForScrip,\r\n      scripCost,\r\n      avgScripShareCost,\r\n      netCash,\r\n      scripCostYield,\r\n      newAvgCostPerShare,\r\n      newForwardYield,\r\n    };\r\n  };\r\n\r\n  const calculateNumberOfSharesForScrip = (page, rowsPerPage) => {\r\n    setLoading(false);\r\n\r\n    const arr = [];\r\n    const count = (page * rowsPerPage) / 2;\r\n    let limit = ((page + 1) * rowsPerPage) / 2;\r\n\r\n    for (let i = count + roundOff; i <= limit; i = i + roundOff) {\r\n      console.log(\"Start\");\r\n      let scripShares = Math.round(i); // Number is rounded up\r\n      let sharesForScrip = Math.round((i * scripPrice) / DPS);\r\n      let scripCost = parseFloat((sharesForScrip * DPS).toFixed(2));\r\n      let netCash = parseFloat(((sharesOutstanding - sharesForScrip) * DPS).toFixed(2));\r\n\r\n      let avgScripShareCost = calculateAvgScripCost(scripCost, scripShares);\r\n      let scripCostYield = calculateYield(expectedForwardDPS, avgScripShareCost);\r\n\r\n      // Calculate New Values\r\n      let newAvgCostPerShare = calculateNewAvgCost(avgCostPerShare, sharesOutstanding, scripCost, scripShares);\r\n      let newForwardYield = calculateYield(expectedForwardDPS, newAvgCostPerShare);\r\n      arr.push(\r\n        createData(\r\n          i,\r\n          scripShares,\r\n          sharesForScrip,\r\n          scripCost,\r\n          avgScripShareCost,\r\n          netCash,\r\n          scripCostYield,\r\n          newAvgCostPerShare,\r\n          newForwardYield\r\n        )\r\n      );\r\n    }\r\n\r\n    setRows(arr);\r\n    setLoading(true);\r\n\r\n    if (roundOff === 0.5) {\r\n      setRoundOffView(true);\r\n    } else {\r\n      setRoundOffView(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Scrip Calculator</h1>\r\n\r\n      <div style={{ padding: 20 }}>\r\n        <Grid container spacing={1}>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Expected Annual Dividend\"\r\n                defaultValue=\" \"\r\n                id=\"expectedForwardDPS\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setExpectedForwardDPS(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Current Amount of Shares\"\r\n                defaultValue=\" \"\r\n                id=\"sharesOutstanding\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setSharesOutstanding(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Current Average Cost Per Share\"\r\n                defaultValue=\" \"\r\n                id=\"avgCostPerShare\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setAvgCostPerShare(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            {/* <Grid container item xl={2} xs={3} style={{ alignContent: \"center\" }}>\r\n              Current Cost Yield = {currentForwardYield}\r\n            </Grid> */}\r\n          </Grid>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Scrip Issue Price\"\r\n                defaultValue=\" \"\r\n                id=\"scripPrice\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setScripPrice(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Declared Dividend Per Share\"\r\n                defaultValue=\" \"\r\n                id=\"DPS\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setDPS(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid item style={{ padding: 5 }}>\r\n              Round off to:\r\n            </Grid>\r\n            <Grid item style={{ padding: 5 }}>\r\n              <Button\r\n                variant={flag1 ? \"contained\" : \"outlined\"}\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                onClick={() => {\r\n                  handleButtonClick(\"flag1\");\r\n                  setRoundOff(0.5);\r\n                }}\r\n              >\r\n                0.5\r\n              </Button>\r\n            </Grid>\r\n            <Grid item style={{ padding: 5 }}>\r\n              <Button\r\n                variant={flag2 ? \"contained\" : \"outlined\"}\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                onClick={() => {\r\n                  handleButtonClick(\"flag2\");\r\n                  setRoundOff(1);\r\n                }}\r\n              >\r\n                1\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                console.log(expectedForwardDPS, sharesOutstanding, scripPrice, DPS);\r\n                // setCurrentForwardYield(calculateYield(expectedForwardDPS, avgCostPerShare));\r\n                calculateNumberOfSharesForScrip(page, rowsPerPage);\r\n                setPaginationView(true);\r\n\r\n                console.log(rows);\r\n              }}\r\n            >\r\n              Show Me My Scrips\r\n            </Button>\r\n          </Grid>\r\n\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container>\r\n              {loading ? (\r\n                <Table stickyHeader aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Scrip Shares Entitlted</TableCell>\r\n                      <TableCell align=\"center\">Share Quantity to Elect</TableCell>\r\n                      {roundOffView ? <TableCell align=\"center\">Scrip Shares After Round Up/Down</TableCell> : \"\"}\r\n                      <TableCell align=\"center\">Average Cost per Scrip</TableCell>\r\n                      <TableCell align=\"center\">Yield on Scrip Share</TableCell>\r\n                      <TableCell align=\"center\">New Average Cost Yield per Share</TableCell>\r\n                      <TableCell align=\"center\">Cash to be Received</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {rows.map((row) => (\r\n                      <TableRow key={row.scripShares}>\r\n                        <TableCell align=\"center\">{row.scripShares}</TableCell>\r\n                        <TableCell align=\"center\">{row.sharesForScrip}</TableCell>\r\n                        {roundOffView ? <TableCell align=\"center\">{row.roundUp}</TableCell> : \"\"}\r\n                        <TableCell align=\"center\">{row.avgScripShareCost}</TableCell>\r\n                        <TableCell align=\"center\">{row.scripCostYield}</TableCell>\r\n                        <TableCell align=\"center\">{row.newForwardYield}</TableCell>\r\n                        <TableCell align=\"center\">{row.netCash}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                  <TableFooter>\r\n                    <TableRow>\r\n                      {paginationView ? (\r\n                        <TablePagination\r\n                          rowsPerPageOptions={[50, 250, 500, 1000]}\r\n                          count={100000}\r\n                          rowsPerPage={rowsPerPage}\r\n                          page={page}\r\n                          SelectProps={{\r\n                            inputProps: { \"aria-label\": \"rows per page\" },\r\n                            native: true,\r\n                          }}\r\n                          onChangePage={handleChangePage}\r\n                          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                        />\r\n                      ) : (\r\n                        <TableRow />\r\n                      )}\r\n                    </TableRow>\r\n                  </TableFooter>\r\n                </Table>\r\n              ) : (\r\n                <CircularProgress />\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}