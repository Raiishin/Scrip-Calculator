{"version":3,"sources":["logic/helpers/index.js","App.js","reportWebVitals.js","index.js"],"names":["calculateAvgScripCost","scripCost","scripShares","parseFloat","toFixed","calculateYield","expectedForwardDPS","avgScripShareCost","calculateNewAvgCost","avgCostPerShare","sharesOutstanding","parseInt","require","TextField","Grid","Button","Table","TableHead","TableRow","TableCell","TableBody","TableFooter","TablePagination","CircularProgress","App","useState","setExpectedForwardDPS","setSharesOutstanding","setAvgCostPerShare","currentForwardYield","setCurrentForwardYield","scripPrice","setScripPrice","DPS","setDPS","rows","setRows","loading","setLoading","page","setPage","rowsPerPage","setRowsPerPage","paginationView","setPaginationView","createData","roundUp","sharesForScrip","netCash","scripCostYield","newAvgCostPerShare","newForwardYield","calculateNumberOfSharesForScrip","arr","limit","i","console","log","Math","round","push","className","style","padding","container","spacing","item","xl","xs","label","defaultValue","id","variant","onChange","e","target","value","color","onClick","aria-label","align","map","row","rowsPerPageOptions","count","SelectProps","inputProps","native","onChangePage","event","newPage","onChangeRowsPerPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c47335d.chunk.js","sourcesContent":["export const calculateAvgScripCost = (scripCost, scripShares) => {\r\n  return parseFloat((scripCost / scripShares).toFixed(2));\r\n};\r\nexport const calculateYield = (expectedForwardDPS, avgScripShareCost) => {\r\n  return parseFloat(((expectedForwardDPS / avgScripShareCost) * 100).toFixed(5));\r\n};\r\n\r\nexport const calculateNewAvgCost = (avgCostPerShare, sharesOutstanding, scripCost, scripShares) => {\r\n  const totalCost = avgCostPerShare * sharesOutstanding + scripCost;\r\n  const totalShares = parseInt(sharesOutstanding) + scripShares;\r\n  return (totalCost / totalShares).toFixed(3);\r\n};\r\n","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nconst {\r\n  TextField,\r\n  Grid,\r\n  Button,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  TableFooter,\r\n  TablePagination,\r\n  CircularProgress,\r\n} = require(\"@material-ui/core\");\r\nconst { calculateAvgScripCost, calculateYield, calculateNewAvgCost } = require(\"./logic/helpers\");\r\n\r\nfunction App() {\r\n  const [expectedForwardDPS, setExpectedForwardDPS] = useState(0);\r\n  const [sharesOutstanding, setSharesOutstanding] = useState(0);\r\n  const [avgCostPerShare, setAvgCostPerShare] = useState(0);\r\n  const [currentForwardYield, setCurrentForwardYield] = useState(0);\r\n  const [scripPrice, setScripPrice] = useState(0);\r\n  const [DPS, setDPS] = useState(0);\r\n  const [rows, setRows] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(50);\r\n  const [paginationView, setPaginationView] = useState(false);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    calculateNumberOfSharesForScrip(newPage, rowsPerPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value));\r\n    setPage(0);\r\n    calculateNumberOfSharesForScrip(0, parseInt(event.target.value));\r\n  };\r\n\r\n  const createData = (\r\n    scripShares,\r\n    roundUp,\r\n    sharesForScrip,\r\n    scripCost,\r\n    avgScripShareCost,\r\n    netCash,\r\n    scripCostYield,\r\n    newAvgCostPerShare,\r\n    newForwardYield\r\n  ) => {\r\n    return {\r\n      scripShares,\r\n      roundUp,\r\n      sharesForScrip,\r\n      scripCost,\r\n      avgScripShareCost,\r\n      netCash,\r\n      scripCostYield,\r\n      newAvgCostPerShare,\r\n      newForwardYield,\r\n    };\r\n  };\r\n\r\n  const calculateNumberOfSharesForScrip = (page, rowsPerPage) => {\r\n    setLoading(false);\r\n\r\n    const arr = [];\r\n    const count = (page * rowsPerPage) / 2;\r\n    let limit = ((page + 1) * rowsPerPage) / 2;\r\n\r\n    for (let i = count + 0.5; i <= limit; i = i + 0.5) {\r\n      console.log(\"Start\");\r\n      let scripShares = Math.round(i); // Number is rounded up\r\n      let sharesForScrip = Math.round((i * scripPrice) / DPS);\r\n      let scripCost = parseFloat((sharesForScrip * DPS).toFixed(2));\r\n      let netCash = parseFloat(((sharesOutstanding - sharesForScrip) * DPS).toFixed(2));\r\n\r\n      let avgScripShareCost = calculateAvgScripCost(scripCost, scripShares);\r\n      let scripCostYield = calculateYield(expectedForwardDPS, avgScripShareCost);\r\n\r\n      // Calculate New Values\r\n      let newAvgCostPerShare = calculateNewAvgCost(avgCostPerShare, sharesOutstanding, scripCost, scripShares);\r\n      let newForwardYield = calculateYield(expectedForwardDPS, newAvgCostPerShare);\r\n      arr.push(\r\n        createData(\r\n          i,\r\n          scripShares,\r\n          sharesForScrip,\r\n          scripCost,\r\n          avgScripShareCost,\r\n          netCash,\r\n          scripCostYield,\r\n          newAvgCostPerShare,\r\n          newForwardYield\r\n        )\r\n      );\r\n    }\r\n\r\n    setRows(arr);\r\n    setLoading(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Scrip Calculator</h1>\r\n\r\n      <div style={{ padding: 20 }}>\r\n        <Grid container spacing={1}>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Expected Forward DPS (Annual)\"\r\n                defaultValue=\" \"\r\n                id=\"expectedForwardDPS\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setExpectedForwardDPS(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Shares Currently Held\"\r\n                defaultValue=\" \"\r\n                id=\"sharesOutstanding\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setSharesOutstanding(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Average Cost Per Share\"\r\n                defaultValue=\" \"\r\n                id=\"avgCostPerShare\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setAvgCostPerShare(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container item xl={2} xs={4}>\r\n              Current Forward Yield = {currentForwardYield}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Scrip Issue Price\"\r\n                defaultValue=\" \"\r\n                id=\"scripPrice\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setScripPrice(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Declared Dividend Per Share\"\r\n                defaultValue=\" \"\r\n                id=\"DPS\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setDPS(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                console.log(expectedForwardDPS, sharesOutstanding, scripPrice, DPS);\r\n                setCurrentForwardYield(calculateYield(expectedForwardDPS, avgCostPerShare));\r\n                calculateNumberOfSharesForScrip(page, rowsPerPage);\r\n                setPaginationView(true);\r\n\r\n                console.log(rows);\r\n              }}\r\n            >\r\n              Render Table\r\n            </Button>\r\n          </Grid>\r\n\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xs={2}></Grid>\r\n            <Grid container item xs={8}>\r\n              {loading ? (\r\n                <Table aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Number of Scrip Shares</TableCell>\r\n                      <TableCell align=\"center\">Rounded Up Scrip Shares</TableCell>\r\n                      <TableCell align=\"center\">Number of Shares for Scrip</TableCell>\r\n                      <TableCell align=\"center\">Cost</TableCell>\r\n                      <TableCell align=\"center\">Average Cost per Scrip</TableCell>\r\n                      <TableCell align=\"center\">Net Cash Dividends</TableCell>\r\n                      <TableCell align=\"center\">Yield on Scrip Cost</TableCell>\r\n                      <TableCell align=\"center\">New Average Cost per Share</TableCell>\r\n                      <TableCell align=\"center\">New Forward Yield</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {rows.map((row) => (\r\n                      <TableRow key={row.scripShares}>\r\n                        <TableCell align=\"center\">{row.scripShares}</TableCell>\r\n                        <TableCell align=\"center\">{row.roundUp}</TableCell>\r\n                        <TableCell align=\"center\">{row.sharesForScrip}</TableCell>\r\n                        <TableCell align=\"center\">{row.scripCost}</TableCell>\r\n                        <TableCell align=\"center\">{row.avgScripShareCost}</TableCell>\r\n                        <TableCell align=\"center\">{row.netCash}</TableCell>\r\n                        <TableCell align=\"center\">{row.scripCostYield}</TableCell>\r\n                        <TableCell align=\"center\">{row.newAvgCostPerShare}</TableCell>\r\n                        <TableCell align=\"center\">{row.newForwardYield}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                  <TableFooter>\r\n                    <TableRow>\r\n                      {paginationView ? (\r\n                        <TablePagination\r\n                          rowsPerPageOptions={[50, 250, 500, 1000]}\r\n                          count={100000}\r\n                          rowsPerPage={rowsPerPage}\r\n                          page={page}\r\n                          SelectProps={{\r\n                            inputProps: { \"aria-label\": \"rows per page\" },\r\n                            native: true,\r\n                          }}\r\n                          onChangePage={handleChangePage}\r\n                          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                        />\r\n                      ) : (\r\n                        <TableRow />\r\n                      )}\r\n                    </TableRow>\r\n                  </TableFooter>\r\n                </Table>\r\n              ) : (\r\n                <CircularProgress />\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}