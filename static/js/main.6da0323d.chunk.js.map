{"version":3,"sources":["helpers/index.js","modules/pagination.js","modules/roundOffButton.js","modules/errorDialog.js","modules/renderTableButton.js","App.js","reportWebVitals.js","index.js"],"names":["calculateAvgScripCost","scripCost","scripShares","parseFloat","toFixed","calculateYield","expectedForwardDPS","avgScripShareCost","calculateNewAvgCost","avgCostPerShare","sharesOutstanding","parseInt","validate","content","createData","roundUp","sharesForScrip","netCash","scripCostYield","newAvgCostPerShare","newForwardYield","TablePagination","require","Pagination","props","rowsPerPageOptions","count","rowsPerPage","page","SelectProps","inputProps","native","onChangePage","handleChangePage","onChangeRowsPerPage","handleChangeRowsPerPage","Grid","Button","RoundOffButton","container","style","padding","item","variant","flag1","color","size","onClick","handleButtonClick","flag2","Dialog","DialogTitle","DialogContent","DialogActions","DialogContentText","ErrorDialog","open","onClose","handleClose","aria-labelledby","aria-describedby","id","errorMessage","autoFocus","RenderTableButton","document","getElementById","value","handleClickOpen","setErrorMessage","calculateNumberOfSharesForScrip","setPaginationView","TextField","Table","TableHead","TableRow","TableCell","TableBody","TableFooter","CircularProgress","App","useState","setExpectedForwardDPS","setSharesOutstanding","setAvgCostPerShare","scripPrice","setScripPrice","DPS","setDPS","React","setOpen","roundOff","setRoundOff","roundOffView","setRoundOffView","setFlag1","setFlag2","rows","setRows","loading","setLoading","setPage","setRowsPerPage","paginationView","arr","limit","i","Math","round","push","className","spacing","xl","xs","label","defaultValue","onChange","e","target","flag","stickyHeader","aria-label","align","map","row","fontWeight","event","newPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6da0323d.chunk.js","sourcesContent":["export const calculateAvgScripCost = (scripCost, scripShares) => {\r\n  return parseFloat((scripCost / scripShares).toFixed(2));\r\n};\r\nexport const calculateYield = (expectedForwardDPS, avgScripShareCost) => {\r\n  return parseFloat(((expectedForwardDPS / avgScripShareCost) * 100).toFixed(5));\r\n};\r\n\r\nexport const calculateNewAvgCost = (avgCostPerShare, sharesOutstanding, scripCost, scripShares) => {\r\n  const totalCost = avgCostPerShare * sharesOutstanding + scripCost;\r\n  const totalShares = parseInt(sharesOutstanding) + scripShares;\r\n  return (totalCost / totalShares).toFixed(3);\r\n};\r\n\r\nexport const validate = (content) => {\r\n  if (content !== \" \") return true;\r\n  else return false;\r\n};\r\n\r\nexport const createData = (\r\n  scripShares,\r\n  roundUp,\r\n  sharesForScrip,\r\n  scripCost,\r\n  avgScripShareCost,\r\n  netCash,\r\n  scripCostYield,\r\n  newAvgCostPerShare,\r\n  newForwardYield\r\n) => {\r\n  return {\r\n    scripShares,\r\n    roundUp,\r\n    sharesForScrip,\r\n    scripCost,\r\n    avgScripShareCost,\r\n    netCash,\r\n    scripCostYield,\r\n    newAvgCostPerShare,\r\n    newForwardYield,\r\n  };\r\n};\r\n","import React from \"react\";\r\nconst { TablePagination } = require(\"@material-ui/core\");\r\n\r\nexport function Pagination(props) {\r\n  return (\r\n    <TablePagination\r\n      rowsPerPageOptions={[50, 250, 500, 1000]}\r\n      count={100000}\r\n      rowsPerPage={props.rowsPerPage}\r\n      page={props.page}\r\n      SelectProps={{\r\n        inputProps: { \"aria-label\": \"rows per page\" },\r\n        native: true,\r\n      }}\r\n      onChangePage={props.handleChangePage}\r\n      onChangeRowsPerPage={props.handleChangeRowsPerPage}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nconst { Grid, Button } = require(\"@material-ui/core\");\r\n\r\nexport function RoundOffButton(props) {\r\n  return (\r\n    <Grid container style={{ padding: 5 }}>\r\n      <Grid item style={{ padding: 5 }}>\r\n        Round off to:\r\n      </Grid>\r\n      <Grid item style={{ padding: 5 }}>\r\n        <Button\r\n          variant={props.flag1 ? \"contained\" : \"outlined\"}\r\n          color=\"primary\"\r\n          size=\"small\"\r\n          onClick={() => {\r\n            props.handleButtonClick(\"flag1\");\r\n          }}\r\n        >\r\n          0.5\r\n        </Button>\r\n      </Grid>\r\n      <Grid item style={{ padding: 5 }}>\r\n        <Button\r\n          variant={props.flag2 ? \"contained\" : \"outlined\"}\r\n          color=\"primary\"\r\n          size=\"small\"\r\n          onClick={() => {\r\n            props.handleButtonClick(\"flag2\");\r\n          }}\r\n        >\r\n          1\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\nconst { Button, Dialog, DialogTitle, DialogContent, DialogActions, DialogContentText } = require(\"@material-ui/core\");\r\n\r\nexport function ErrorDialog(props) {\r\n  return (\r\n    <Dialog\r\n      open={props.open}\r\n      onClose={props.handleClose}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">{\"Missing Input\"}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">{props.errorMessage}</DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={props.handleClose} color=\"primary\" autoFocus>\r\n          Okay\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from \"react\";\r\nconst { Button } = require(\"@material-ui/core\");\r\nconst { validate } = require(\"../helpers\");\r\n\r\nexport function RenderTableButton(props) {\r\n  return (\r\n    <Button\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      onClick={() => {\r\n        if (validate(document.getElementById(\"expectedForwardDPS\").value) === false) {\r\n          props.handleClickOpen();\r\n          props.setErrorMessage(\"Please input the Expected Annual Dividend\");\r\n        } else if (validate(document.getElementById(\"sharesOutstanding\").value) === false) {\r\n          props.handleClickOpen();\r\n          props.setErrorMessage(\"Please input the Current Amount of Shares\");\r\n        } else if (validate(document.getElementById(\"avgCostPerShare\").value) === false) {\r\n          props.handleClickOpen();\r\n          props.setErrorMessage(\"Please input the Current Average Cost Per Share\");\r\n        } else if (validate(document.getElementById(\"scripPrice\").value) === false) {\r\n          props.handleClickOpen();\r\n          props.setErrorMessage(\"Please input the Scrip Issue Price\");\r\n        } else if (validate(document.getElementById(\"DPS\").value) === false) {\r\n          props.handleClickOpen();\r\n          props.setErrorMessage(\"Please input the Declared Dividend Per Share\");\r\n        } else {\r\n          props.calculateNumberOfSharesForScrip(props.page, props.rowsPerPage);\r\n          props.setPaginationView(true);\r\n        }\r\n      }}\r\n    >\r\n      Show Me My Scrips\r\n    </Button>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nconst {\r\n  TextField,\r\n  Grid,\r\n  Button,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  TableFooter,\r\n  CircularProgress,\r\n} = require(\"@material-ui/core\");\r\nconst { calculateAvgScripCost, calculateYield, calculateNewAvgCost, validate, createData } = require(\"./helpers\");\r\nconst { Pagination } = require(\"./modules/pagination\");\r\nconst { RoundOffButton } = require(\"./modules/roundOffButton\");\r\nconst { ErrorDialog } = require(\"./modules/errorDialog\");\r\nconst { RenderTableButton } = require(\"./modules/renderTableButton\");\r\n\r\nfunction App() {\r\n  // User Inputs\r\n  const [expectedForwardDPS, setExpectedForwardDPS] = useState(0);\r\n  const [sharesOutstanding, setSharesOutstanding] = useState(0);\r\n  const [avgCostPerShare, setAvgCostPerShare] = useState(0);\r\n  const [scripPrice, setScripPrice] = useState(0);\r\n  const [DPS, setDPS] = useState(0);\r\n\r\n  // Error Prompts\r\n  const [open, setOpen] = React.useState(false);\r\n  const [errorMessage, setErrorMessage] = React.useState(\"\");\r\n\r\n  // Round Off\r\n  const [roundOff, setRoundOff] = useState(0.5);\r\n  const [roundOffView, setRoundOffView] = useState(true);\r\n  const [flag1, setFlag1] = useState(true);\r\n  const [flag2, setFlag2] = useState(false);\r\n\r\n  // Data Rendering\r\n  const [rows, setRows] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Pagination\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(50);\r\n  const [paginationView, setPaginationView] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleButtonClick = (flag) => {\r\n    if (flag === \"flag1\") {\r\n      setRoundOff(0.5);\r\n\r\n      setFlag1(true);\r\n      setFlag2(false);\r\n    } else {\r\n      setRoundOff(1);\r\n\r\n      setFlag1(false);\r\n      setFlag2(true);\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    calculateNumberOfSharesForScrip(newPage, rowsPerPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value));\r\n    setPage(0);\r\n    calculateNumberOfSharesForScrip(0, parseInt(event.target.value));\r\n  };\r\n\r\n  const calculateNumberOfSharesForScrip = (page, rowsPerPage) => {\r\n    setLoading(false);\r\n\r\n    const arr = [];\r\n    const count = (page * rowsPerPage) / 2;\r\n    let limit = ((page + 1) * rowsPerPage) / 2;\r\n\r\n    for (let i = count + roundOff; i <= limit; i = i + roundOff) {\r\n      let scripShares = Math.round(i); // Number is rounded up\r\n      let sharesForScrip = Math.round((i * scripPrice) / DPS);\r\n      let scripCost = parseFloat((sharesForScrip * DPS).toFixed(2));\r\n      let netCash = parseFloat(((sharesOutstanding - sharesForScrip) * DPS).toFixed(2));\r\n\r\n      let avgScripShareCost = calculateAvgScripCost(scripCost, scripShares);\r\n      let scripCostYield = calculateYield(expectedForwardDPS, avgScripShareCost);\r\n\r\n      // Calculate New Values\r\n      let newAvgCostPerShare = calculateNewAvgCost(avgCostPerShare, sharesOutstanding, scripCost, scripShares);\r\n      let newForwardYield = calculateYield(expectedForwardDPS, newAvgCostPerShare);\r\n      arr.push(\r\n        createData(\r\n          i,\r\n          scripShares,\r\n          sharesForScrip,\r\n          scripCost,\r\n          avgScripShareCost,\r\n          netCash,\r\n          scripCostYield,\r\n          newAvgCostPerShare,\r\n          newForwardYield\r\n        )\r\n      );\r\n    }\r\n\r\n    setRows(arr);\r\n    setLoading(true);\r\n\r\n    if (roundOff === 0.5) {\r\n      setRoundOffView(true);\r\n    } else {\r\n      setRoundOffView(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Scrip Calculator</h1>\r\n\r\n      <div style={{ padding: 20 }}>\r\n        <Grid container spacing={1}>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Expected Annual Dividend\"\r\n                defaultValue=\" \"\r\n                id=\"expectedForwardDPS\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setExpectedForwardDPS(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Current Amount of Shares\"\r\n                defaultValue=\" \"\r\n                id=\"sharesOutstanding\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setSharesOutstanding(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Current Average Cost Per Share\"\r\n                defaultValue=\" \"\r\n                id=\"avgCostPerShare\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setAvgCostPerShare(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Scrip Issue Price\"\r\n                defaultValue=\" \"\r\n                id=\"scripPrice\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setScripPrice(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Declared Dividend Per Share\"\r\n                defaultValue=\" \"\r\n                id=\"DPS\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setDPS(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <RoundOffButton handleButtonClick={handleButtonClick} flag1={flag1} flag2={flag2} />\r\n\r\n          <Grid container style={{ padding: 5 }}>\r\n            <RenderTableButton\r\n              handleClickOpen={handleClickOpen}\r\n              setErrorMessage={setErrorMessage}\r\n              calculateNumberOfSharesForScrip={calculateNumberOfSharesForScrip}\r\n              setPaginationView={setPaginationView}\r\n              page={page}\r\n              rowsPerPage={rowsPerPage}\r\n            />\r\n            <ErrorDialog open={open} handleClose={handleClose} errorMessage={errorMessage}></ErrorDialog>\r\n          </Grid>\r\n\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container>\r\n              {loading ? (\r\n                <Table stickyHeader aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Scrip Shares Entitlted</TableCell>\r\n                      <TableCell align=\"center\">Share Quantity to Elect</TableCell>\r\n                      {roundOffView ? <TableCell align=\"center\">Scrip Shares After Round Up/Down</TableCell> : \"\"}\r\n                      <TableCell align=\"center\">Average Cost per Scrip</TableCell>\r\n                      <TableCell align=\"center\">Yield on Scrip Share</TableCell>\r\n                      <TableCell align=\"center\">New Average Cost Yield per Share</TableCell>\r\n                      <TableCell align=\"center\">Cash to be Received</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {rows.map((row) => (\r\n                      <TableRow key={row.scripShares}>\r\n                        <TableCell align=\"center\">{row.scripShares}</TableCell>\r\n                        <TableCell align=\"center\">{row.sharesForScrip}</TableCell>\r\n                        {roundOffView ? <TableCell align=\"center\">{row.roundUp}</TableCell> : \"\"}\r\n                        <TableCell align=\"center\">{row.avgScripShareCost}</TableCell>\r\n                        <TableCell align=\"center\" style={{ fontWeight: \"bold\" }}>\r\n                          {row.scripCostYield}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\" style={{ fontWeight: \"bold\" }}>\r\n                          {row.newForwardYield}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">{row.netCash}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                  <TableFooter>\r\n                    <TableRow>\r\n                      {paginationView ? (\r\n                        <Pagination\r\n                          rowsPerPage={rowsPerPage}\r\n                          page={page}\r\n                          handleChangePage={handleChangePage}\r\n                          handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                        ></Pagination>\r\n                      ) : (\r\n                        <TableRow />\r\n                      )}\r\n                    </TableRow>\r\n                  </TableFooter>\r\n                </Table>\r\n              ) : (\r\n                <CircularProgress />\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}