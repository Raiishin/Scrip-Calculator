{"version":3,"sources":["logic/helpers/index.js","App.js","reportWebVitals.js","index.js"],"names":["calculateAvgScripCost","scripCost","scripShares","parseFloat","toFixed","calculateYield","expectedForwardDPS","avgScripShareCost","calculateNewAvgCost","avgCostPerShare","sharesOutstanding","parseInt","require","TextField","Grid","Button","Table","TableHead","TableRow","TableCell","TableBody","TablePagination","App","useState","setRender","setExpectedForwardDPS","setSharesOutstanding","setAvgCostPerShare","currentForwardYield","setCurrentForwardYield","scripPrice","setScripPrice","DPS","setDPS","rows","setRows","createData","roundUp","sharesForScrip","netCash","scripCostYield","newAvgCostPerShare","newForwardYield","className","style","padding","container","spacing","item","xl","xs","label","defaultValue","id","variant","onChange","e","target","value","color","onClick","console","log","arr","i","Math","round","push","calculateNumberOfSharesForScrip","aria-label","align","map","row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff41fddb.chunk.js","sourcesContent":["export const calculateAvgScripCost = (scripCost, scripShares) => {\r\n  return parseFloat((scripCost / scripShares).toFixed(2));\r\n};\r\nexport const calculateYield = (expectedForwardDPS, avgScripShareCost) => {\r\n  return parseFloat(((expectedForwardDPS / avgScripShareCost) * 100).toFixed(5));\r\n};\r\n\r\nexport const calculateNewAvgCost = (avgCostPerShare, sharesOutstanding, scripCost, scripShares) => {\r\n  const totalCost = avgCostPerShare * sharesOutstanding + scripCost;\r\n  const totalShares = parseInt(sharesOutstanding) + scripShares;\r\n  return (totalCost / totalShares).toFixed(3);\r\n};\r\n","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nconst {\r\n  TextField,\r\n  Grid,\r\n  Button,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  TablePagination,\r\n} = require(\"@material-ui/core\");\r\nconst { calculateAvgScripCost, calculateYield, calculateNewAvgCost } = require(\"./logic/helpers\");\r\n\r\nfunction App() {\r\n  const [render, setRender] = useState(false);\r\n  const [expectedForwardDPS, setExpectedForwardDPS] = useState(0);\r\n  const [sharesOutstanding, setSharesOutstanding] = useState(0);\r\n  const [avgCostPerShare, setAvgCostPerShare] = useState(0);\r\n  const [currentForwardYield, setCurrentForwardYield] = useState(0);\r\n  const [scripPrice, setScripPrice] = useState(0);\r\n  const [DPS, setDPS] = useState(0);\r\n  const [rows, setRows] = useState([]);\r\n\r\n  function createData(\r\n    scripShares,\r\n    roundUp,\r\n    sharesForScrip,\r\n    scripCost,\r\n    avgScripShareCost,\r\n    netCash,\r\n    scripCostYield,\r\n    newAvgCostPerShare,\r\n    newForwardYield\r\n  ) {\r\n    return {\r\n      scripShares,\r\n      roundUp,\r\n      sharesForScrip,\r\n      scripCost,\r\n      avgScripShareCost,\r\n      netCash,\r\n      scripCostYield,\r\n      newAvgCostPerShare,\r\n      newForwardYield,\r\n    };\r\n  }\r\n\r\n  const calculateNumberOfSharesForScrip = () => {\r\n    const arr = [];\r\n\r\n    for (let i = 0.5; i <= 100; i = i + 0.5) {\r\n      let scripShares = Math.round(i); // Number is rounded up\r\n      let sharesForScrip = Math.round((i * scripPrice) / DPS);\r\n      let scripCost = parseFloat((sharesForScrip * DPS).toFixed(2));\r\n      let netCash = parseFloat(((sharesOutstanding - sharesForScrip) * DPS).toFixed(2));\r\n\r\n      let avgScripShareCost = calculateAvgScripCost(scripCost, scripShares);\r\n      let scripCostYield = calculateYield(expectedForwardDPS, avgScripShareCost);\r\n\r\n      // Calculate New Values\r\n      let newAvgCostPerShare = calculateNewAvgCost(avgCostPerShare, sharesOutstanding, scripCost, scripShares);\r\n      let newForwardYield = calculateYield(expectedForwardDPS, newAvgCostPerShare);\r\n      arr.push(\r\n        createData(\r\n          i,\r\n          scripShares,\r\n          sharesForScrip,\r\n          scripCost,\r\n          avgScripShareCost,\r\n          netCash,\r\n          scripCostYield,\r\n          newAvgCostPerShare,\r\n          newForwardYield\r\n        )\r\n      );\r\n    }\r\n    setRows(arr);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Scrip Calculator</h1>\r\n\r\n      <div style={{ padding: 20 }}>\r\n        <Grid container spacing={1}>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Expected Forward DPS (Annual)\"\r\n                defaultValue=\" \"\r\n                id=\"expectedForwardDPS\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setExpectedForwardDPS(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Shares Currently Held\"\r\n                defaultValue=\" \"\r\n                id=\"sharesOutstanding\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setSharesOutstanding(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Average Cost Per Share\"\r\n                defaultValue=\" \"\r\n                id=\"avgCostPerShare\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setAvgCostPerShare(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container item xl={2} xs={4}>\r\n              Current Forward Yield = {currentForwardYield}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Scrip Issue Price\"\r\n                defaultValue=\" \"\r\n                id=\"scripPrice\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setScripPrice(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xl={2} xs={4}>\r\n              <TextField\r\n                label=\"Declared Dividend Per Share\"\r\n                defaultValue=\" \"\r\n                id=\"DPS\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {\r\n                  setDPS(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                console.log(expectedForwardDPS, sharesOutstanding, scripPrice, DPS);\r\n                setCurrentForwardYield(calculateYield(expectedForwardDPS, avgCostPerShare));\r\n                calculateNumberOfSharesForScrip();\r\n                setRender(true);\r\n              }}\r\n            >\r\n              Render Table\r\n            </Button>\r\n          </Grid>\r\n\r\n          <Grid container style={{ padding: 5 }}>\r\n            <Grid container item xs={2}></Grid>\r\n            <Grid container item xs={8}>\r\n              <Table aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Number of Scrip Shares</TableCell>\r\n                    <TableCell align=\"center\">Rounded Up Scrip Shares</TableCell>\r\n                    <TableCell align=\"center\">Number of Shares for Scrip</TableCell>\r\n                    <TableCell align=\"center\">Cost</TableCell>\r\n                    <TableCell align=\"center\">Average Cost per Scrip</TableCell>\r\n                    <TableCell align=\"center\">Net Cash Dividends</TableCell>\r\n                    <TableCell align=\"center\">Yield on Scrip Cost</TableCell>\r\n                    <TableCell align=\"center\">New Average Cost per Share</TableCell>\r\n                    <TableCell align=\"center\">New Forward Yield</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rows.map((row) => (\r\n                    <TableRow key={row.scripShares}>\r\n                      <TableCell align=\"center\">{row.scripShares}</TableCell>\r\n                      <TableCell align=\"center\">{row.roundUp}</TableCell>\r\n                      <TableCell align=\"center\">{row.sharesForScrip}</TableCell>\r\n                      <TableCell align=\"center\">{row.scripCost}</TableCell>\r\n                      <TableCell align=\"center\">{row.avgScripShareCost}</TableCell>\r\n                      <TableCell align=\"center\">{row.netCash}</TableCell>\r\n                      <TableCell align=\"center\">{row.scripCostYield}</TableCell>\r\n                      <TableCell align=\"center\">{row.newAvgCostPerShare}</TableCell>\r\n                      <TableCell align=\"center\">{row.newForwardYield}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}